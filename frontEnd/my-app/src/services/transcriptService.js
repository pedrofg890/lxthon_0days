/**
 * transcriptService.js
 *
 * Provides functions to fetch and cache the latest cleaned transcript
 * segments generated by the backend for a given YouTube URL.
 */
const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8080/api/videos';

/** @type {Array<object>} Caches the most recently fetched transcript segments. */
let lastTranscript = [];

/**
 * Fetches the cleaned transcript for the specified YouTube video URL.
 *
 * Sends a GET request to the `/clean-transcript` endpoint.
 *
 * @param {string} url               The YouTube video URL to transcribe.
 * @param {AbortSignal} [signal]     Optional AbortSignal to cancel the request.
 * @returns {Promise<Array<object>>} Resolves with an array of TranscriptSegment:
 *                                   { startTime: number, endTime: number, text: string, normalizedText: string }
 * @throws {Error}                   If the network request fails or returns non-OK status.
 */
export async function getTranscript(url, signal) {
    const response = await fetch(`${API_URL}/clean-transcript?url=${encodeURIComponent(url)}`, { signal });
    const data = await response.json();
    if (!response.ok) {
        throw new Error('Failed to fetch transcript');
    }
    // If the response is already an array, use it directly
    if (Array.isArray(data)) {
        lastTranscript = data;
    } else {
        lastTranscript = data._embedded ? data._embedded.transcript : [];
    }
    return lastTranscript;
}

/**
 * Returns the last fetched transcript segments.
 *
 * Useful for components that re-render without making a new network request
 * (e.g., when navigating between pages).
 *
 * @returns {Array<object>} The cached transcript array, or [] if none fetched yet.
 */
export function getLastTranscript() {
    return lastTranscript;
}