/**
 * quizService.js
 *
 * Provides functions to fetch and cache the latest quiz
 * generated by the backend for a given YouTube URL.
 *//**
 * quizService.js
 *
 * Provides functions to fetch and cache the latest quiz
 * generated by the backend for a given YouTube URL.
 */
const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8080/api/videos';

/** @type {object|null} Holds the most recently fetched quiz object. */
let lastQuiz = null;

/**
 * Fetches a multiple-choice quiz for the given YouTube video URL.
 *
 * Sends a GET request to the backend `/quiz` endpoint.
 *
 * @param {string} videoUrl           The YouTube video URL to generate a quiz from.
 * @param {number} [numQuestions=5]   Number of questions to request.
 * @param {AbortSignal} [signal]      Optional AbortSignal to cancel the request.
 * @returns {Promise<object>}         Resolves with the quiz object:
 *                                     { title: string, questions: QuizQuestion[] }
 * @throws {Error}                    If the network request fails or returns a non-OK status;
 *                                    the backend error text is propagated.
 */
export async function getQuiz(videoUrl, numQuestions = 5, signal) {
    const resp = await fetch(
        `${API_URL}/quiz?url=${encodeURIComponent(videoUrl)}&numQuestions=${numQuestions}`,
        signal ? { signal } : undefined
    );
    if (!resp.ok) {
        const txt = await resp.text();
        throw new Error(txt || 'Erro ao gerar quiz');
    }
    const quiz = await resp.json();
    lastQuiz = quiz;
    return quiz;
}

/**
 * Returns the last fetched quiz object.
 *
 * Useful for components that need to re-render the quiz
 * without making a new network request.
 *
 * @returns {object|null} The last quiz, or null if none fetched yet.
 */
export function getLastQuiz() {
    return lastQuiz;
}
